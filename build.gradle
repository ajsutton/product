plugins {
  id 'org.ajoberstar.grgit' version '4.0.2'
}

println "Yay! Release branch!"

rootProject.version = calculatePublishVersion()
def specificVersion = calculateVersion()
def isDevelopBuild = rootProject.version.contains('develop')

task assemble {
  doFirst {
    println "Assembled"
    if (project.hasProperty('branch')) {
      println project.property('branch')
    } else {
      println "No branch"
    }
    println grgit ? grgit.branch.current().name : "No git branch"


    print "Specific version: ${specificVersion}  Publish version: ${project.version} Develop build: ${isDevelopBuild}"
  }
}

// Calculate the version that this build would be published under (if it is published)
// If this exact commit is tagged, use the tag
// If this is on a release-* branch, use the most recent tag appended with +develop (e.g. 0.1.1-RC1+develop)
// Otherwise, use develop
def calculatePublishVersion() {
  if (!grgit) {
    return 'UNKNOWN'
  }
  def specificVersion = calculateVersion()
  def isReleaseBranch = grgit.branch.current().name.startsWith('release-')
  if (specificVersion.contains('+')) {
    return isReleaseBranch ? "${specificVersion.substring(0, specificVersion.indexOf('+'))}+develop" : "develop"
  }
  return specificVersion
}

// Calculate the version that teku --version will report (among other places)
// If this exact commit is tagged, use the tag
// Otherwise use git describe --tags and replace the - after the tag with a +
def calculateVersion() {
  if (!grgit) {
    return 'UNKNOWN'
  }
  String version = grgit.describe(tags: true)
  def versionPattern = ~/^(?<lastVersion>.*)-(?<devVersion>[0-9]+-g[a-z0-9]+)$/
  def matcher = version =~ versionPattern
  if (matcher.find()) {
    return "${matcher.group("lastVersion")}+${matcher.group("devVersion")}"
  }
  return version
}



task spotlessCheck {
  doFirst {
    println "spotlessCheck"
  }
}


task test {
  doFirst {
    println "test"
  }
}

task integrationTest {
  doFirst {
    println "integrationTest"
  }
}

task acceptanceTest {
  doFirst {
    println "acceptanceTest"
  }
}

task referenceTest {
  doFirst {
    println "referenceTest"
  }
}

task compatibilityTest {
  doFirst {
    println "compatibilityTest"
  }
}

task distDocker {
  doFirst {
    println "distDocker"
  }
}

task bintrayUpload {
  doFirst {
    println "bintrayUpload"
  }
}

task dockerUpload {
  doFirst {
    println "bintrayUpload"
  }
}

task extractAPISpec {
  doFirst {
    println "extractAPISpec"
  }
}

task publishAPIDoc {
  doFirst {
    println "publishAPIDoc"
  }
}
